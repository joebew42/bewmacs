(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  )

;; Auto-installing packages
;; source: http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/
(require 'cl)
(defvar prelude-packages
  '(ag
    erlang
    flx-ido
    flx
    git-gutter-fringe
    fringe-helper
    git-gutter
    haml-mode
    markdown-mode
    yaml-mode
    zenburn-theme)
  "A list of packages to ensure are installed at launch.")

(defun prelude-packages-installed-p ()
  (loop for p in prelude-packages
        when (not (package-installed-p p)) do (return nil)
        finally (return t)))

(unless (prelude-packages-installed-p)
  ;; check for new packages (package versions)
  (message "%s" "Emacs Prelude is now refreshing its package database...")
  (package-refresh-contents)
  (message "%s" " done.")
  ;; install the missing packages
  (dolist (p prelude-packages)
    (when (not (package-installed-p p))
      (package-install p))))

(provide 'prelude-packages)

;; Font size
;; (set-face-attribute 'default nil :height 98)
(set-face-attribute 'default nil :height 110)

;; Zenburn theme
(load-theme 'zenburn t)

;; Hide toolbar
(tool-bar-mode 0)

;; No wrap lines
(setq-default truncate-lines t)

;; Auto-indent
(define-key global-map (kbd "RET") 'newline-and-indent)

;; No-Tabs
(setq-default indent-tabs-mode nil)

;; Linux-C indentation
(setq c-default-style "linux"
      c-basic-offset 4)

;; Disable auto-save
(setq auto-save-default nil)

;; Prevent from making backup files
(setq make-backup-files nil)

;; Highlight current line
(global-hl-line-mode t)

;; Line numbers
(global-linum-mode t)

;; Show line-number in the mode line
(setq-default line-number-mode t)

;; Show column-number in the mode line
(setq-default column-number-mode t)

;; Show trailing whitespace
(setq-default show-trailing-whitespace t)

;; Line-by-line scrollin
(setq redisplay-dont-pause t
  scroll-margin 1
  scroll-step 1
  scroll-conservatively 10000
  scroll-preserve-screen-position 1)

;; Show git diff information
(require 'git-gutter-fringe)
(global-git-gutter-mode t)

;; ag
(require 'ag)
(setq ag-highlight-search t)

;; Flx-ido
(require 'flx-ido)
(ido-mode t)
(ido-everywhere t)
(flx-ido-mode t)
;; disable ido faces to see flx highlights.
(setq ido-use-faces nil)

;; YAML-mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\.yml\'" . yaml-mode))

;; HAML-mode
(require 'haml-mode)

;; Markdown-mode
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; Erlang-mode
(require 'erlang-start)

;; Indentation
;; Tab Width of two spaces in js-mode
(setq js-indent-level 2)

;; No encoding header for ruby
(setq ruby-insert-encoding-magic-comment nil)

;; whitespace-cleanup on save
;; http://www.gc3.uzh.ch/blog/Whitespace_cleanup_with_Emacs/
(defun whitespace-cleanup* ()
  (let* ((modified-before-p (buffer-modified-p)))
    (whitespace-cleanup)
    (if (not modified-before-p)
        (not-modified))))
(defun whitespace-cleanup-on-save ()
  (add-hook 'write-contents-hooks #'whitespace-cleanup*))
;; whitespace-cleanup for following modes
(add-hook 'c-mode-common-hook   #'whitespace-cleanup-on-save)
(add-hook 'emacs-lisp-mode-hook #'whitespace-cleanup-on-save)
(add-hook 'python-mode-hook     #'whitespace-cleanup-on-save)
(add-hook 'ruby-mode-hook       #'whitespace-cleanup-on-save)
(add-hook 'js-mode-hook         #'whitespace-cleanup-on-save)
(add-hook 'sh-mode-hook         #'whitespace-cleanup-on-save)
(add-hook 'text-mode-hook       #'whitespace-cleanup-on-save)
(add-hook 'yaml-mode-hook       #'whitespace-cleanup-on-save)

;; CUSTOM MACROs

;; Move code region
;; Credit: Andreas Politz
;; URL: https://groups.google.com/forum/#!msg/gnu.emacs.help/dd2R_UV0LVQ/F06ihLb7hKcJ
(defun move-text-internal (arg)
   (cond
    ((and mark-active transient-mark-mode)
     (if (> (point) (mark))
            (exchange-point-and-mark))
     (let ((column (current-column))
              (text (delete-and-extract-region (point) (mark))))
       (forward-line arg)
       (move-to-column column t)
       (set-mark (point))
       (insert text)
       (exchange-point-and-mark)
       (setq deactivate-mark nil)))
    (t
     (beginning-of-line)
     (when (or (> arg 0) (not (bobp)))
       (forward-line)
       (when (or (< arg 0) (not (eobp)))
            (transpose-lines arg))
       (forward-line -1)))))

(defun move-text-down (arg)
   "Move region (transient-mark-mode active) or current line
  arg lines down."
   (interactive "*p")
   (move-text-internal arg))

(defun move-text-up (arg)
   "Move region (transient-mark-mode active) or current line
  arg lines up."
   (interactive "*p")
   (move-text-internal (- arg)))

(global-set-key [\M-\S-up] 'move-text-up)
(global-set-key [\M-\S-down] 'move-text-down)

;; Duplicate line
;; Credit: Nate
;; URL: http://stackoverflow.com/questions/88399/how-do-i-duplicate-a-whole-line-in-emacs
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)
(global-set-key (kbd "C-d") 'duplicate-line)
