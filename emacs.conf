(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (add-to-list 'package-archives '("melpa" . "http://melpa.milkbox.net/packages/") t)
  )

;; Auto-installing packages
;; source: http://batsov.com/articles/2012/02/19/package-management-in-emacs-the-good-the-bad-and-the-ugly/
(require 'cl)
(defvar prelude-packages
  '(ag
    auto-complete
    flx-ido
    flx
    fiplr
    multiple-cursors
    git-gutter-fringe
    fringe-helper
    git-gutter
    erlang
    elixir-mode
    haml-mode
    markdown-mode
    yaml-mode
    spacegray-theme)
  "A list of packages to ensure are installed at launch.")

(defun prelude-packages-installed-p ()
  (loop for p in prelude-packages
        when (not (package-installed-p p)) do (return nil)
        finally (return t)))

(unless (prelude-packages-installed-p)
  ;; check for new packages (package versions)
  (message "%s" "Emacs Prelude is now refreshing its package database...")
  (package-refresh-contents)
  (message "%s" " done.")
  ;; install the missing packages
  (dolist (p prelude-packages)
    (when (not (package-installed-p p))
      (package-install p))))

(provide 'prelude-packages)

;; Font size
(set-face-attribute 'default nil :height 120 :font "Source Code Pro")

;; Zenburn theme
(load-theme 'spacegray t)

;; Hide toolbar
(tool-bar-mode 0)

;; Hide menubar
(menu-bar-mode 0)

;; Hide scrollbar
(scroll-bar-mode -1)

;; No wrap lines
(setq-default truncate-lines t)

;; Auto-indent
(define-key global-map (kbd "RET") 'newline-and-indent)

;; No-Tabs
(setq-default indent-tabs-mode nil)

;; Linux-C indentation
(setq c-default-style "linux"
      c-basic-offset 4)

;; Disable auto-save
(setq auto-save-default nil)

;; Prevent from making backup files
(setq make-backup-files nil)

;; Highlight current line
(global-hl-line-mode t)

;; Show line-number in the mode line
(setq-default line-number-mode t)

;; Show column-number in the mode line
(setq-default column-number-mode t)

;; Show trailing whitespace
(setq-default show-trailing-whitespace t)

;; Line-by-line scrollin
(setq redisplay-dont-pause t
      scroll-margin 1
      scroll-step 1
      scroll-conservatively 10000
      scroll-preserve-screen-position 1)

;; Enable multiple-cursors
(require 'multiple-cursors)
(global-set-key (kbd "C-d") 'mc/mark-next-like-this)

;; Enable auto-complete
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
(define-key ac-mode-map (kbd "M-TAB") 'auto-complete)

;; ag
(require 'ag)
(setq ag-highlight-search t)

;; Flx-ido
(require 'flx-ido)
(ido-mode t)
(ido-everywhere t)
(flx-ido-mode t)
;; disable ido faces to see flx highlights.
(setq ido-use-faces nil)

;; Show git diff information
(require 'git-gutter-fringe)
(global-git-gutter-mode t)

;; YAML-mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\.yml\'" . yaml-mode))

;; HAML-mode
(require 'haml-mode)

;; Markdown-mode
(autoload 'markdown-mode "markdown-mode"
  "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . markdown-mode))

;; Erlang-mode
(require 'erlang-start)
(add-to-list 'ac-modes 'erlang-mode)

;; Indentation
;; Tab Width of two spaces in js-mode
(setq js-indent-level 2)

;; No encoding header for ruby
(setq ruby-insert-encoding-magic-comment nil)

;; whitespace-cleanup on save
(add-hook 'before-save-hook 'delete-trailing-whitespace)

;; CUSTOM MACROs

;; Move code region
;; Credit: Andreas Politz
;; URL: https://groups.google.com/forum/#!msg/gnu.emacs.help/dd2R_UV0LVQ/F06ihLb7hKcJ
(defun move-text-internal (arg)
  (cond
   ((and mark-active transient-mark-mode)
    (if (> (point) (mark))
        (exchange-point-and-mark))
    (let ((column (current-column))
          (text (delete-and-extract-region (point) (mark))))
      (forward-line arg)
      (move-to-column column t)
      (set-mark (point))
      (insert text)
      (exchange-point-and-mark)
      (setq deactivate-mark nil)))
   (t
    (beginning-of-line)
    (when (or (> arg 0) (not (bobp)))
      (forward-line)
      (when (or (< arg 0) (not (eobp)))
        (transpose-lines arg))
      (forward-line -1)))))

(defun move-text-down (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines down."
  (interactive "*p")
  (move-text-internal arg))

(defun move-text-up (arg)
  "Move region (transient-mark-mode active) or current line
  arg lines up."
  (interactive "*p")
  (move-text-internal (- arg)))

(global-set-key [\M-\S-up] 'move-text-up)
(global-set-key [\M-\S-down] 'move-text-down)

;; Duplicate line
;; Credit: Nate
;; URL: http://stackoverflow.com/questions/88399/how-do-i-duplicate-a-whole-line-in-emacs
(defun duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
  )
(global-set-key (kbd "C-S-d") 'duplicate-line)

;; Rename file and buffer
;; URL: http://emacsredux.com/blog/2013/05/04/rename-file-and-buffer/
(defun rename-file-and-buffer ()
  "Rename the current buffer and file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (if (not (and filename (file-exists-p filename)))
        (message "Buffer is not visiting a file!")
      (let ((new-name (read-file-name "New name: " filename)))
        (cond
         ((vc-backend filename) (vc-rename-file filename new-name))
         (t
          (rename-file filename new-name t)
          (set-visited-file-name new-name t t)))))))
(global-set-key (kbd "C-x r")  'rename-file-and-buffer)

;; Find file like vim's Ctrlp
(global-set-key (kbd "C-x p")  'fiplr-find-file)

;; Enable curly brackets on Mac OS
(setq mac-option-modifier nil
      mac-command-modifier 'meta
      x-select-enable-clipboard t)

;; Replace string in a region
(global-set-key (kbd "C-S-r") 'replace-string)
